
% Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
% All rights reserved.
% 
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are
% met:
% 
%     - Redistributions of source code must retain the above copyright
%       notice, this list of conditions and the following disclaimer.
% 
%     - Redistributions in binary form must reproduce the above copyright
%       notice, this list of conditions and the following disclaimer in
%       the documentation and/or other materials provided with the
%       distribution.
% 
%     - Neither the name of The Numerical ALgorithms Group Ltd. nor the
%       names of its contributors may be used to endorse or promote products
%       derived from this software without specific prior written permission.
% 
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
% IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
% TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
% PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
% OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
% EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
% PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES-- LOSS OF USE, DATA, OR
% PROFITS-- OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
% LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
% NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
% SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


%
% DO NOT EDIT THIS FILE. This was created by gloss.awk
% from gloss.ht.
%
\texht{\setcounter{chapter}{6}}{} % Appendix G

\def\glossaryTerm#1{{\bf #1}\index{#1}}
\def\glossaryTermNoIndex#1{{\bf #1}}
\def\glossarySyntaxTerm#1{{\tt #1}\indexAxiomSyntax{#1}}
\long\def\ourGloss#1#2{\par\pagebreak[3]{#1}\newline{#2}}

{
\twocolumn[%
% *********************************************************************
\head{chapter}{Glossary}{ugGlossary}
% *********************************************************************
]
\useFullPage{}
\appendixMark{Glossary}

\baselineskip=10pt\parskip=.5\baselineskip
\parindent=0pt\xmpWidth=\hsize
\sloppy

\ourGloss{\glossarySyntaxTerm{!}}{%
{\it (syntax)}
Suffix character
\index{operation!destructive}
for \spadglossSee{destructive operations}{destructive operation}.
}

\ourGloss{\glossarySyntaxTerm{,}}{%
{\it (syntax)}
a separator for items in a \spadgloss{tuple},
for example, to separate arguments of a function \spad{f(x,y)}.
}


\ourGloss{\glossarySyntaxTerm{=>}}{%
{\it (syntax)}
the expression \spad{a => b} is equivalent to \spad{if a
then} \spadgloss{exit} \spad{b}.
}


\ourGloss{\glossarySyntaxTerm{?}}{%
1.
{\it (syntax)} a suffix character for Boolean-valued \spadfun{function}
names, for example, \spadfun{odd?}.
2.
Prefix character for ``optional'' pattern variables. For example,
the pattern \spad{f(x + y)} does not match the expression \spad{f(7)},
but \spad{f(?x + y)} does, with \spad{x} matching 0 and \spad{y} matching 7.
3.
The special type \pspadtype{?} means {\it don't care}.
For example, the declaration: \spad{x : Polynomial ?} means
that values assigned to \spad{x} must be polynomials over an arbitrary
\spadgloss{underlying domain}.
}

\ourGloss{\glossaryTerm{abstract datatype}}{%
a programming language principle used in \Language{} where a datatype definition has
defined in two parts: (1) a {\it public} part describing a set of
\spadglossSee{exports}{export},
principally operations that apply to objects of that
type, and (2) a {\it private} part describing the implementation of the
datatype usually in terms of a \spadgloss{representation} for objects of
the type.
Programs that create and otherwise manipulate objects of the type may
only do so through its exports.
The representation and other implementation information is specifically
hidden.
}


\ourGloss{\glossaryTerm{abstraction}}{%
described functionally or conceptually without regard to implementation.
}


\ourGloss{\glossaryTerm{accuracy}}{%
the degree of exactness of an approximation or measurement.
In computer algebra systems, computations are typically carried out with
complete accuracy using integers or rational numbers of indefinite size.
Domain \spadtype{Float} provides a function
\spadfunFrom{precision}{Float} to change the precision for floating-point
computations. Computations using \spadtype{DoubleFloat} have a fixed
precision but uncertain accuracy.
}


\ourGloss{\glossaryTerm{add-chain}}{%
a hierarchy formed by \spadglossSee{domain extensions}{domain extension}.
If domain \spad{A} extends domain \spad{B} and domain \spad{B} extends
domain \spad{C}, then \spad{A} has {\it add-chain} \spad{B}-\spad{C}.
}


\ourGloss{\glossaryTerm{aggregate}}{%
a data structure designed to hold multiple values.
Examples of aggregates are \spadtype{List}, \spadtype{Set},
\spadtype{Matrix} and \spadtype{Bits}.
}


\ourGloss{\glossaryTerm{AKCL}}{%
Austin Kyoto Common LISP, a version of \spadgloss{KCL} produced
by William Schelter, Austin, Texas.
}


\ourGloss{\glossaryTerm{algorithm}}{%
a step-by-step procedure for a solution of a problem; a program
}


\ourGloss{\glossaryTerm{ancestor}}{%
(of a domain or category) a category that is a \spadgloss{parent}, or
a \spadgloss{parent} of a \spadgloss{parent}, and so on.
See a {\bf Cross Reference} page of a constructor in \Browse{}.
}


\ourGloss{\glossaryTerm{application}}{%
{\it (syntax)} an expression denoting ``application'' of a function to a
set of \spadgloss{argument} parameters.
Applications are written as a \spadgloss{parameterized form}.
For example, the form \spad{f(x,y)} indicates the ``application of the
function \spad{f} to the tuple of arguments \spad{x} and \spad{y}.''
See also \spadgloss{evaluation} and \spadgloss{invocation}.
}


\ourGloss{\glossaryTerm{apply}}{%
See \spadgloss{application}.
}


\ourGloss{\glossaryTerm{argument}}{%
1.
(actual argument) a value passed to a function at the time of a
\spadglossSee{function call}{application}; also called an {\it actual
parameter}. 2.
(formal argument) a variable used in the definition of a function to
denote the actual argument passed when the function is called.
}


\ourGloss{\glossaryTerm{arity}}{%
1.
(function) the number of arguments.
2.
(operator or operation) corresponds to the arity of a function
implementing the operator or operation.
}


\ourGloss{\glossaryTerm{assignment}}{%
{\it (syntax)} an expression of the form \spad{x := e}, meaning
``assign the value of \spad{e} to \spad{x}.''
After \spadgloss{evaluation}, the \spadgloss{variable} \spad{x}
\spadglossSee{points}{pointer} to an object obtained by evaluating
the expression \spad{e}.
If \spad{x} has a \spadgloss{type} as a result of a previous
\spadgloss{declaration}, the object assigned to \spad{x} must have
that type.
The interpreter must often \spadglossSee{coerce}{coercion} the
value of \spad{e} to make that happen.
For example, the expression \spad{x : Float := 11}
first \spadglossSee{declares}{declaration} \spad{x} to be a float, then
forces the interpreter to coerce the integer \spad{11} to
\spad{11.0} in order to assign a floating-point value to \spad{x}.
}


\ourGloss{\glossaryTerm{attribute}}{%
a name or functional form denoting {\it any} useful computational or mathematical
property. For example, \spadatt{commutative(\spad{"*"})} asserts that
\spadop{*} is commutative.
Also, \spadatt{finiteAggregate} is used to assert that an aggregate has
a finite number of immediate components.
}


\ourGloss{\glossaryTerm{basis}}{%
{\it (algebra)} \spad{S} is a basis of a module \spad{M} over a
\spadgloss{ring} if \spad{S} generates \spad{M}, and \spad{S} is linearly
independent.
}


\ourGloss{\glossaryTerm{benefactor}}{%
(of a given domain) a domain or package that the given domain explicitly
references (for example, calls functions from) in its implementation.
See a {\bf Cross Reference} page of a constructor in \Browse{}.
}


\ourGloss{\glossaryTerm{binary}}{%
operation or function with \spadgloss{arity} 2.
}


\ourGloss{\glossaryTerm{binding}}{%
the association of a variable with properties such as \spadgloss{value}
and \spadgloss{type}.
The top-level \spadgloss{environment} in the interpreter consists of
bindings for all user variables and functions.
When a \spadgloss{function} is applied to arguments, a local environment
of bindings is created, one for
each formal \spadgloss{argument} and \spadgloss{local variable}.
}


\ourGloss{\glossaryTerm{block}}{%
{\it (syntax)} a control structure where expressions are sequentially
\spadglossSee{evaluated}{evaluation}.
}


\ourGloss{\glossaryTerm{body}}{%
a \spadgloss{function body} or \spadgloss{loop body}.
}


\ourGloss{\glossaryTerm{boolean}}{%
objects denoted by the \spadglossSee{literals}{literal} \spad{true} and
\spad{false}; elements of domain \spadtype{Boolean}.
\exptypeindex{Boolean}
See also \spadtype{Bits}.
}


\ourGloss{\glossaryTerm{built-in function}}{%
a \spadgloss{function} in the standard \Language{} library.
\index{function!built-in}
Contrast \spadgloss{user function}.
}


\ourGloss{\glossaryTerm{cache}}{%
1.
(noun) a mechanism for immediate retrieval of previously computed data.
For example, a function that does a lengthy computation might store its
values in a \spadgloss{hash table} using the function argument as
the key.
The hash table then serves as a cache for the function (see also
\spadcmd{)set function cache}).
Also, when \spadglossSee{recurrence relations}{recurrence relation} that depend upon \spad{n}
previous values are compiled, the previous \spad{n} values are normally
cached (use \spadcmd{)set functions recurrence} to change this).
2.
(verb) to save values in a cache.
}


\ourGloss{\glossaryTerm{capsule}}{%
the part of the \spadglossSee{body}{function body} of a
\spadgloss{domain constructor} that defines the functions implemented by
the constructor.
}


\ourGloss{\glossaryTerm{case}}{%
{\it (syntax)} an operator used to evaluate code conditionally based on
the branch of a \pspadtype{Union}.
\exptypeindex{Union}
For example, if value \spad{u} is \spad{Union(Integer, "failed")}, the
conditional expression \spad{if u case Integer then A else B} evaluates
\spad{A} if \spad{u} is an integer and \spad{B} otherwise.
}


\ourGloss{\glossaryTerm{Category}}{%
the distinguished object denoting the type of a category; the class of
all categories.
}


\ourGloss{\glossaryTerm{category}}{%
{\it (basic concept)} types denoting
classes of domains.
Examples of categories are \spadtype{Ring} (``the class of all
rings'') and \spadtype{Aggregate} (``the class of all aggregates'').
Categories form a hierarchy (formally, a directed acyclic graph)
with the distinquished category \spadtype{Type}
at the top.
Each category inherits the properties of all its ancestors.
Categories optionally provide ``default definitions'' for
operations they export.
Categories are defined in \Language{} by functions called
\spadglossSee{category constructors}{category constructor}.
Technically, a category designates a class of domains with common
\spadglossSee{operations}{operation} and
\spadglossSee{attributes}{attribute} but usually with different
\spadglossSee{functions}{function}
and \spadglossSee{representations}{representation} for its
constituent \spadglossSee{objects}{object}.
Categories are always defined using the \Language{} library
language (see also \spadgloss{category extension}).
See also file {\bf catdef.spad} for definitions of basic algebraic
\index{file!catdef.spad @{\bf catdef.spad}}
categories in \Language{}, {\bf aggcat.spad} for data structure
\index{file!aggcat.spad @{\bf aggcat.spad}}
}


\ourGloss{\glossaryTerm{category constructor}}{%
a function that creates categories, described by an abstract datatype in
\index{constructor!category}
the \Language{} programming language.
For example, the category constructor \spadtype{Module} is a function
that takes a domain parameter \spad{R} and creates the category ``modules
over \spad{R}.''
}


\ourGloss{\glossaryTerm{category extension}}{%
A category \spad{A} {\it directly extends} a category \spad{B} if
its definition has the form \spad{A == B with ...} or
\spad{A == Join(...,B,...)}.
In this case, we also say that \spad{B} is the \spadgloss{parent} of \spad{A}.
We say that a category \spad{A} extends \spad{B} if \spad{B} is
an \spadgloss{ancestor} of \spad{A}.
A category \spad{A} may also directly extend \spad{B} if
\spad{B} appears in a conditional expression within the {\tt Exports} part
of the definition to the right of a {\tt with}.
See, for example, file {\bf catdef.spad} for definitions of the
\index{file!catdef.spad @{\bf catdef.spad}}
algebra categories in \Language{}, {\bf aggcat.spad} for data structure
\index{file!aggcat.spad @{\bf aggcat.spad}}
categories.
}

\ourGloss{\glossaryTerm{category hierarchy}}{%
hierarchy formed by category extensions.
The root category is \spadtype{Type}.
\exptypeindex{Type}
A category can be defined as a \spadgloss{Join} of two or more
categories so as to have multiple \spadglossSee{parents}{parent}.
Categories may also be parameterized so as to allow conditional
inheritance.
}


\ourGloss{\glossaryTerm{character}}{%
1.
an element of a character set, as represented by a keyboard key.
2.
a component of a string.
For example, the \spad{1}st element of the string \spad{"hello there"} is the
character {\it h}.
}


\ourGloss{\glossaryTerm{client}}{%
(of a given domain) any domain or package that explicitly calls
functions from the given domain.
See a {\bf Cross Reference} page of a constructor in \Browse{}.
}


\ourGloss{\glossaryTerm{coercion}}{%
an automatic transformation of an object of one \spadgloss{type} to an
object of a similar or desired target type.
In the interpreter, coercions and \spadglossSee{retractions}{retraction}
are done
automatically by the interpreter when a type mismatch occurs.
Compare \spadgloss{conversion}.
}


\ourGloss{\glossaryTerm{comment}}{%
textual remarks imbedded in code.
Comments are preceded by a double dash (\spadSyntax{--}).
For \Language{} library code, stylized comments for on-line
documentation are preceded by two plus signs (\spadSyntax{++}).
}


\ourGloss{\glossaryTerm{Common LISP}}{%
A version of \spadgloss{LISP} adopted as an informal standard by major
users and suppliers of LISP.
}


\ourGloss{\glossaryTerm{compile-time}}{%
the time when category or domain constructors are compiled.
Contrast \spadgloss{run-time}.
}


\ourGloss{\glossaryTerm{compiler}}{%
a program that generates low-level code from a higher-level source
language. \Language{} has three compilers.
A {\it graphics compiler} converts graphical formulas to a compiled
subroutine so that points can be rapidly produced for graphics commands.
An {\it interpreter compiler} optionally compiles
\spadglossSee{user functions}{user function}
when first \spadglossSee{invoked}{invocation} (use
\spadsys{)set functions compile} to turn this feature on).
A {\it library compiler} compiles all constructors (available on an ``as-is''
basis for Release 1).
}


\ourGloss{\glossaryTerm{computational object}}{%
In \Language{}, domains are objects.
This term is used to distinguish the objects that are members of
domains rather than the domains themselves.
}


\ourGloss{\glossaryTerm{conditional}}{%
a \spadgloss{control structure} of the form \spad{if A then B else C}.
\spadkey{if}
The \spadgloss{evaluation} of \spad{A} produces \spad{true} or
\spad{false}. If \spad{true}, \spad{B} evaluates to produce a value;
otherwise \spad{C} evaluates to produce a value.
When the value is not required, the \spad{else C} part can be omitted.
}


\ourGloss{\glossaryTerm{constant}}{%
{\it (syntax)} a reserved word used in \spadglossSee{signatures}{signature} in
\Language{} programming language to signify that an operation always
returns the same value.
For example, the signature \spad{0: constant -> \$} in the source code
of \spadtype{AbelianMonoid} tells the \Language{} compiler that \spad{0}
is a constant so that suitable optimizations might be performed.
}


\ourGloss{\glossaryTerm{constructor}}{%
a \spadgloss{function} that creates a \spadgloss{category},
\spadgloss{domain}, or \spadgloss{package}.
}


\ourGloss{\glossaryTerm{continuation}}{%
when a line of a program is so long that it must be broken into several
lines, then all but the first line are called {\it continuation lines}.
If such a line is given interactively, then each incomplete line must
end with an underscore.
}


\ourGloss{\glossaryTerm{control structure}}{%
program structures that can specify a departure from normal sequential
execution. \Language{} has four kinds of control structures:
\spadglossSee{blocks}{block}, \spadgloss{case} statements,
\spadglossSee{conditionals}{conditional}, and \spadglossSee{loops}{loop}.
}


\ourGloss{\glossaryTerm{conversion}}{%
the transformation of an object of one \spadgloss{type} to one of
another type.
Conversions that can be performed automatically by the
interpreter are called
\spadglossSee{coercions}{coercion}. These happen when the
interpreter encounters a type mismatch and a similar or declared
target type is needed.
In general, the user must use the infix operation \spadSyntax{::}
to cause this transformation.
}


\ourGloss{\glossaryTerm{copying semantics}}{%
the programming language semantics used in PASCAL
\index{PASCAL}
but {\it not} in
\index{semantics!copying}
\Language{}. See also \spadgloss{pointer semantics} for details.
\index{semantics!pointer}
}


\ourGloss{\glossaryTerm{data structure}}{%
a structure for storing data in the computer.
Examples are \spadglossSee{lists}{list}
and \spadglossSee{hash tables}{hash table}.
}


\ourGloss{\glossaryTerm{datatype}}{%
equivalent to \spadgloss{domain} in \Language{}.
}


\ourGloss{\glossaryTerm{declaration}}{%
{\it (syntax)} an expression of the form \spad{x : T} where \spad{T} is
some \spadgloss{type}.
A declaration forces all values \spadglossSee{assigned}{assignment} to
\spad{x} to be of that type.
If a value is of a different type, the interpreter will try to
\spadglossSee{coerce}{coercion} the value to type \spad{T}.
Declarations are necessary in case of ambiguity or when a user wants to
introduce an \spadglossSee{unexposed}{expose} domain.
}


\ourGloss{\glossaryTerm{default definition}}{%
a function defined by a \spadgloss{category}.
Such definitions appear in category definitions of the form \newline
\spad{C: Category == T add I} \newline
in an optional implementation part \spad{I} to the
right of the keyword \spad{add}.
}


\ourGloss{\glossaryTerm{default package}}{%
an optional \spadgloss{package}
of \spadglossSee{functions}{function} associated with a category.
Such functions are necessarily defined in terms of other operations
exported by the category.
}


\ourGloss{\glossaryTerm{definition}}{%
{\it (syntax)} 1.
An expression of the form \spad{f(a) == b} defining function \spad{f}
with \spadglossSee{formal arguments}{argument}
\spad{a} and \spadgloss{body} \spad{b};
equivalent to the statement \spad{f == (a) +-> b}.
2.
An expression of the form \spad{a == b} where \spad{a} is a
\spadgloss{symbol}, equivalent to \spad{a() == b}.
See also \spadgloss{macro} where a similar substitution is done at
\spadgloss{parse} time.
}


\ourGloss{\glossaryTerm{delimiter}}{%
a \spadgloss{character} that marks the beginning or end of some
syntactically correct unit in the language, for example,
\spadSyntax{"} for strings, blanks for identifiers.
}

\ourGloss{\glossaryTerm{dependent}}{%
(of a given constructor) another constructor that mentions the given
constructor as an argument or among the types of an exported operation.
See a {\bf Cross Reference} page of a constructor in \Browse{}.
}


\ourGloss{\glossaryTerm{destructive operation}}{%
An operation that changes a component or structure of a value.
\index{operation!destructive}
In \Language{}, destructive operations have names ending
with an exclamation mark (\spadSyntax{!}).
For example, domain \spadtype{List} has two operations to reverse
the elements of a list, one named \spadfunFrom{reverse}{List}
that returns a copy of the original list with the elements
reversed, another named \spadfunFromX{reverse}{List} that
reverses the elements {\it in place,} thus destructively changing
the original list.
}


\ourGloss{\glossaryTerm{documentation}}{%
1.
on-line or hard-copy descriptions of \Language{}; 2.
text in library code preceded by \spadSyntax{++} comments as opposed to general
comments preceded by \spadSyntax{--}.
}


\ourGloss{\glossaryTerm{domain}}{%
{\it (basic concept)} a domain corresponds to the usual notion of
datatypes.
Examples of domains are
\spadtype{List Float} (``lists of floats''),
\spadtype{Fraction Polynomial Integer} (``fractions of polynomials of integers''),
and \spadtype{Matrix Stream CardinalNumber}
(``matrices of infinite \spadglossSee{streams}{stream} of cardinal numbers'').
The term {\it domain} actually abbreviates {\it domain of
computation}.
Technically, a domain denotes a class of objects, a class of
\spadglossSee{operations}{operation} for creating and otherwise
manipulating these objects, and a class of
\spadglossSee{attributes}{attribute} describing computationally
useful properties.
Domains may also define \spadglossSee{functions}{function} for its exported operations,
often in terms of some \spadgloss{representation} for the objects.
A domain itself is an \spadgloss{object} created by a
\spadgloss{function} called a \spadgloss{domain constructor}.
The types of the exported operations of a domain are arbitary; this gives
rise to a special class of domains called \spadglossSee{packages}{package}.
}


\ourGloss{\glossaryTerm{domain constructor}}{%
a function that creates domains, described by an abstract datatype in
\index{constructor!domain}
the \Language{} programming language.
Simple domains like \spadtype{Integer} and \spadtype{Boolean} are
created by domain constructors with no arguments.
Most domain constructors take one or more parameters, one usually
denoting an \spadgloss{underlying domain}.
For example, the domain \spadtype{Matrix(R)} denotes ``matrices over
\spad{R}.''
\exptypeindex{Mapping}
Domains \pspadtype{Mapping},
\exptypeindex{Record}
\pspadtype{Record}, and \pspadtype{Union} are
\exptypeindex{Union}
primitive domains.
All other domains are written in the \Language{} programming language
and can be modified by users with access to the library source code
and the library compiler.
}


\ourGloss{\glossaryTerm{domain extension}}{%
a domain constructor \spad{A} is said to {\it extend} a domain
constructor \spad{B} if \spad{A}'s definition has the form \spad{A
== B add ...}.
This intuitively means ``functions not defined by \spad{A} are assumed to
come from \spad{B}.''
Successive domain extensions form \spadglossSee{add-chains}{add-chain}
affecting the
\spadglossSee{search order}{lineage} for functions not implemented
directly by the domain during \spadgloss{dynamic lookup}.
}


\ourGloss{\glossaryTerm{dot notation}}{%
using an infix dot (\spadSyntax{.}) for the
operation \spadfun{elt}.
If \spad{u} is the list \spad{[7,4,-11]} then both \spad{u(2)} and
\spad{u.2} return \spad{4}.
Dot notation nests to the left:
\spad{f.g.h} is equivalent to \spad{(f.g).h}.
}


\ourGloss{\glossaryTerm{dynamic}}{%
that which is done at \spadgloss{run-time} as opposed to
\spadgloss{compile-time}.
For example, the interpreter may build a domain ``matrices over
integers'' dynamically in response to user input.
However, the compilation of all functions for matrices and
integers is done during \spadgloss{compile-time}.
Constrast \spadgloss{static}.
}


\ourGloss{\glossaryTerm{dynamic lookup}}{%
In \Language{}, a \spadgloss{domain} may or may not explicitly provide
\spadgloss{function} definitions for all its exported
\spadglossSee{operations}{operation}. These definitions may instead come from domains
in the \spadgloss{add-chain} or from \spadglossSee{default packages}{default package}.
When a \spadglossSee{function call}{application} is made for an
operation in the domain, up to five steps are carried out.
\begin{enumerate}
\item  If the domain itself implements a function for the operation,
that function is returned.
\item  Each of the domains in the \spadgloss{add-chain} are searched;
if one of these domains implements the function, that function is
returned.
\item Each of the \spadglossSee{default packages}{default package}
for the
domain are searched in order of the \spadgloss{lineage}.
If any of the default packages implements the function, the first one
found is returned.
\item  Each of the \spadglossSee{default packages}{default package}
for each of the
domains in the \spadgloss{add-chain} are searched in the order of their
\spadgloss{lineage}. If any of the default packages implements the
function, the first one found is returned.
\item  If all of the above steps fail, an error message is reported.
\end{enumerate}
}


\ourGloss{\glossaryTerm{empty}}{%
the unique value of objects with type \spadtype{Void}.
}


\ourGloss{\glossaryTerm{environment}}{%
a set of \spadglossSee{bindings}{binding}.
}


\ourGloss{\glossaryTerm{evaluation}}{%
a systematic process that transforms an \spadgloss{expression} into an
object called the \spadgloss{value} of the expression.
Evaluation may produce \spadglossSee{side effects}{side effect}.
}


\ourGloss{\glossaryTerm{exit}}{%
{\it (reserved word)} an \spadgloss{operator} that forces an exit from
the current \spadgloss{block}.
For example, the block \spad{(a := 1; if i > 0 then exit a;
a := 2)} will prematurely exit at the second statement with value 1 if
the value of \spad{i} is greater than zero.
See \spadSyntax{=>} for an alternate syntax.
}


\ourGloss{\glossaryTerm{explicit export}}{%
1.
(of a domain \spad{D}) any \spadgloss{attribute}, \spadgloss{operation},
\index{export!explicit}
or \spadgloss{category} explicitly mentioned in the \spadgloss{type}
exports part \spad{E} for the domain constructor definition
\spad{D: E == I} 2.
(of a category \spad{C}) any \spadgloss{attribute},
\spadgloss{operation}, or \spadgloss{category} explicitly mentioned in
the \spadgloss{type} specification part \spad{E} for the category
constructor definition \spad{C: \spadgloss{Category} == E}
}


\ourGloss{\glossaryTerm{export}}{%
\spadgloss{explicit export} or \spadgloss{implicit export} of a domain
or category
}


\ourGloss{\glossaryTerm{expose}}{%
some constructors are {\it exposed}, others {\it unexposed}.
Exposed domains and packages are recognized by the interpreter.
Use \spadsys{)set expose} to control what is exposed.
Unexposed constructors will appear in \Browse{} prefixed by a star (``{\tt *}'').
}


\ourGloss{\glossaryTerm{expression}}{%
1.
any syntactically correct program fragment.
2.
an element of domain \spadtype{Expression}.
}


\ourGloss{\glossaryTerm{extend}}{%
see \spadgloss{category extension} or \spadgloss{domain extension}.
}


\ourGloss{\glossaryTerm{field}}{%
{\it (algebra)} a \spadgloss{domain} that is a \spadgloss{ring} where
every non-zero element is invertible and where \spad{xy=yx}; a member of
category \spadtype{Field}.
For a complete list of fields, click on {\bf Domains} under {\bf Cross
Reference} for \spadtype{Field} in \Browse{}.
}


\ourGloss{\glossaryTerm{file}}{%
1. a program or collection of data stored on disk, tape or other medium.
2. an object of a \spadtype{File} domain.
}


\ourGloss{\glossaryTerm{float}}{%
a floating-point number with user-specified precision; an element of
domain \spadtype{Float}.
\exptypeindex{Float}
Floats are \spadglossSee{literals}{literal} written either without an
exponent (for example, \spad{3.1416}), or with an exponent
(for example, \spad{3.12E-12}).
Use function \spadgloss{precision} to change the precision of the
mantissa (\spad{20} digits by default).
See also \spadgloss{small float}.
}


\ourGloss{\glossaryTerm{formal parameter}}{%
(of a function) an identifier \spadglossSee{bound}{binding} to the value
of an actual \spadgloss{argument} on \spadgloss{invocation}.
In the function definition \spad{f(x,y) == u}, for example, \spad{x} and
\spad{y} are the formal parameters.
}


\ourGloss{\glossaryTerm{frame}}{%
the basic unit of an interactive session; each frame has its own
\spadgloss{step number}, \spadgloss{environment}, and
\spadgloss{history}. In one interactive session, users can create and
drop frames, and have several active frames simultaneously.
}


\ourGloss{\glossaryTermNoIndex{free}}{%
{\it (syntax)}
A keyword used in user-defined functions to declare that
a variable is a \spadgloss{free variable} of that function.
\spadkey{free}
For example, the statement \spad{free x} declares the variable \spad{x}
within the body of a function \spad{f} to be a free variable in \spad{f}.
Without such a declaration, any variable \spad{x} that appears on the
left-hand side of an assignment before it is referenced
is regarded as a \spadgloss{local variable} of that function.
If the intention of the assignment is to give a value to a
\spadgloss{global variable} \spad{x}, the body of that function must
contain the statement \spad{free x}.
A variable that is a parameter to the function is always local.
%This should be a reported bug--->
%, even
%if it has a \spad{free} declaration.
}


\ourGloss{\glossaryTerm{free variable}}{%
(of a function) a variable that appears in a body of a function but is
not \spadglossSee{bound}{binding} by that function.
Contrast with \spadgloss{local variable}.
}


\ourGloss{\glossaryTerm{function}}{%
implementation of \spadgloss{operation}.
A function takes zero or more \spadgloss{argument} parameters and
produces a single return value.
Functions are objects that can be passed as parameters to
functions and can be returned as values of functions.
Functions can also create other functions (see also
\spadtype{InputForm}).
See also \spadgloss{application} and \spadgloss{invocation}.
The terms {\it operation} and {\it function} are distinct notions
in \Language{}.
An operation is an abstraction of a function, described by
a \spadgloss{name} and a \spadgloss{signature}.
A function is created by providing an implementation of that
operation by \Language{} code.
Consider the example of defining a user-function \spad{fact} to
compute the \spadfun{factorial} of a nonnegative integer.
The \Language{} statement \spad{fact: Integer -> Integer}
describes the operation, whereas the statement \spad{fact(n) =
reduce(*,[1..n])} defines the function.
See also \spadgloss{generic function}.
}


\ourGloss{\glossaryTerm{function body}}{%
the part of a \spadgloss{function}'s definition that is
evaluated when the function is called at \spadgloss{run-time}; the part
of the function definition to the right of the \spadSyntax{==}.
}


\ourGloss{\glossaryTerm{garbage collection}}{%
a system function that automatically recycles memory cells from the
\spadgloss{heap}. \Language{} is built upon \spadgloss{Common LISP} that
provides this facility.
}


\ourGloss{\glossaryTerm{garbage collector}}{%
a mechanism for reclaiming storage in the \spadgloss{heap}.
}


\ourGloss{\glossaryTerm{Gaussian}}{%
a complex-valued expression, for example, one with both a real and
imaginary part; a member of a \spadtype{Complex} domain.
}


\ourGloss{\glossaryTerm{generic function}}{%
the use of one function to operate on objects of different types.
One might regard \Language{} as supporting generic
\spadglossSee{operations}{operation} but not generic functions.
One operation \spad{+: (D, D) -> D} exists for adding elements in a
ring; each ring however provides its own type-specific function
for implementing this operation.
}


\ourGloss{\glossaryTerm{global variable}}{%
A variable that can be referenced freely by functions.
\index{variable!global}
In \Language{}, all top-level user-defined variables defined during an
interactive user session are global variables.
\Language{} does not allow {\it fluid variables}, that is, variables
\index{variable!fluid}
\spadglossSee{bound}{binding} by a function \spad{f} that can be referenced by
functions that \spad{f} calls.
}


\ourGloss{\glossaryTermNoIndex{\texht{Gr\protect\"{o}bner}{Groebner} basis}}{%
{\it (algebra)} a special basis for a polynomial ideal that allows a
\index{Groebner basis @{Gr\protect\"{o}bner basis}}
simple test for membership.
\index{basis!Groebner@{Gr\protect\"{o}bner}}
It is useful in solving systems of polynomial equations.
}


\ourGloss{\glossaryTerm{group}}{%
{\it (algebra)} a monoid where every element has a multiplicative
inverse.
}


\ourGloss{\glossaryTerm{hash table}}{%
a data structure designed for fast lookup of information stored under ``keys''.
A hash table consists of a set of {\it entries}, each of which
associates a {\it key} with a {\it value}.
Finding the object stored under a key can be fast for
a large number of entries since keys are {\it hashed} into numerical
codes for fast lookup.
}


\ourGloss{\glossaryTerm{heap}}{%
1. an area of storage used by data in programs.
For example, \Language{} will use the heap to hold the partial results of
symbolic computations.
When cancellations occur, these results remain in the heap until
\spadglossSee{garbage collected}{garbage collector}.
2. an object of a \spadtype{Heap} domain.
}


\ourGloss{\glossaryTerm{history}}{%
a mechanism that records input and output data for an interactive session.
Using the history facility, users can save computations, review previous
steps of a computation, and restore a previous interactive session at
some later time.
For details, issue the system command {\it )history ?} to the
interpreter. See also \spadgloss{frame}.
}


\ourGloss{\glossaryTerm{ideal}}{%
{\it (algebra)} a subset of a ring that is closed under addition and
multiplication by arbitrary ring elements; thus an ideal is
a module over the ring.
}


\ourGloss{\glossaryTerm{identifier}}{%
{\it (syntax)} an \Language{} name; a \spadgloss{literal} of type
\spadtype{Symbol}. An identifier begins with an alphabetical character,
\%, ?, or !, and may be followed by any of these or digits.
Certain distinguished \spadglossSee{reserved words}{reserved word} are not allowed as
identifiers but have special meaning in \Language{}.
}


\ourGloss{\glossaryTerm{immutable}}{%
an object is immutable if it cannot be changed by an
\spadgloss{operation}; it is not a \spadglossSee{mutable object}{mutable}.
Algebraic objects are generally immutable: changing an algebraic expression
involves copying parts of the original object.
One exception is an object of type \spadtype{Matrix}.
Examples of mutable objects are data structures such as those of type
\index{semantics!pointer}
\spadtype{List}. See also \spadgloss{pointer semantics}.
}


\ourGloss{\glossaryTerm{implicit export}}{%
(of a domain or category)
\index{export!implicit}
any exported \spadgloss{attribute} or \spadgloss{operation} or \spadgloss{category}
that is not an \spadgloss{explicit export}.
For example, \spadtype{Monoid} and \spadfun{*} are implicit exports of
\spadtype{Ring}.
}


\ourGloss{\glossaryTerm{index}}{%
1.
a variable that counts the number of times a \spadgloss{loop} is
repeated.
2. the ``address'' of an element in a data structure (see also category
\spadtype{LinearAggregate}).
}


\ourGloss{\glossaryTerm{infix}}{%
{\it (syntax)} an \spadgloss{operator} placed between two
\spadglossSee{operands}{operand}; also called a {\it binary
operator}.
For example, in the expression \spad{a + b}, \spadop{+} is the
infix operator.
An infix operator may also be used as a \spadgloss{prefix}.
Thus \spad{+(a,b)} is also permissible in the \Language{}
language.
Infix operators have a \spadgloss{precedence} relative to one another.
% relative to what?
}


\ourGloss{\glossaryTerm{input area}}{%
a rectangular area on a \HyperName{} screen into which users can enter
text.
}


\ourGloss{\glossaryTerm{instantiate}}{%
to build a \spadgloss{category}, \spadgloss{domain}, or
\spadgloss{package} at run-time.
}


\ourGloss{\glossaryTerm{integer}}{%
a \spadgloss{literal} object of domain \spadtype{Integer}, the class of
integers with an unbounded number of digits.
Integer literals consist of one or more consecutive digits (0-9) with no
embedded blanks.
Underscores can be used to separate digits in long integers if
desirable.
}


\ourGloss{\glossaryTerm{interactive}}{%
a system where the user interacts with the computer step-by-step.
}


\ourGloss{\glossaryTerm{interpreter}}{%
the part of \Language{} responsible for handling user input
during an interactive session.
%The following is a somewhat simplified description of the typical action of
%the interpreter.
The interpreter parses the user's input expression to create an
expression tree, then does a bottom-up traversal of the tree.
Each subtree encountered that is not a value consists of a root node
denoting an operation name and one or more leaf nodes denoting
\spadglossSee{operands}{operand}.
The interpreter resolves type mismatches and uses
type-inferencing and a library database to determine appropriate types for
the operands and the result, and an operation to be performed.
The interpreter next builds a domain to perform the indicated operation,
and invokes a function from the domain to compute a value.
The subtree is then replaced by that value and the process continues.
Once the entire tree has been processed, the value replacing the top
node of the tree is displayed back to the user as the value of the
expression.
}


\ourGloss{\glossaryTerm{invocation}}{%
(of a function) the run-time process involved in
\spadglossSee{evaluating}{evaluation} a \spadgloss{function}
\spadgloss{application}. This process has two steps.
First, a local \spadgloss{environment} is created where
\spadglossSee{formal arguments}{argument}
are locally \spadglossSee{bound}{binding} by
\spadgloss{assignment} to their respective actual \spadgloss{argument}.
Second, the \spadgloss{function body} is evaluated in that local
environment. The evaluation of a function is terminated either by
completely evaluating the function body or by the evaluation of a
\spad{return} expression.
\spadkey{return}
}


\ourGloss{\glossaryTerm{iteration}}{%
repeated evaluation of an expression or a sequence of expressions.
Iterations use the reserved words
\spad{for},
\spadkey{for}
\spad{while},
\spadkey{while}
and \spad{repeat}.
\spadkey{repeat}
}


\ourGloss{\glossaryTerm{Join}}{%
a primitive \Language{} function taking two or more categories as
arguments and producing a category containing all of the operations and
attributes from the respective categories.
}


\ourGloss{\glossaryTerm{KCL}}{%
Kyoto Common LISP, a version of \spadgloss{Common LISP} that features
compilation of LISP into the \spad{C} Programming
Language.
}


\ourGloss{\glossaryTerm{library}}{%
In \Language{}, a collection of compiled modules respresenting
\spadgloss{category} or \spadgloss{domain} constructors.
}


\ourGloss{\glossaryTerm{lineage}}{%
the sequence of
\spadglossSee{default packages}{default package}
for a given domain to be
searched during \spadgloss{dynamic lookup}.
This sequence is computed first by ordering the category
\spadglossSee{ancestors}{ancestor} of the domain according to their {\it level
number}, an integer equal to the minimum distance of the domain from
the category.
Parents have level 1, parents of parents have level 2, and so on.
Among categories with equal level numbers, ones that appear in the
left-most branches of {\tt Join}s in the source code come first.
See a {\bf Cross Reference} page of a constructor in \Browse{}.
See also \spadgloss{dynamic lookup}.
}



\ourGloss{\glossaryTerm{LISP}}{%
acronym for List Processing Language, a language designed for the
manipulation of non-numerical data.
The \Language{} library is translated into LISP then compiled into
machine code by an underlying LISP system.
}


\ourGloss{\glossaryTerm{list}}{%
an object of a \spadtype{List} domain.
}


\ourGloss{\glossaryTerm{literal}}{%
an object with a special syntax in the language.
In \Language{}, there are five types of literals:
\spadglossSee{booleans}{boolean},
\spadglossSee{integers}{integer},
\spadglossSee{floats}{float},
\spadglossSee{strings}{string}, and
\spadglossSee{symbols}{symbol}.
}


\ourGloss{\glossaryTerm{local}}{%
{\it (syntax)}
A keyword used in user-defined functions to declare that
a variable is a \spadgloss{local variable} of that function.
Because of default assumptions on variables, such a declaration is
often not necessary but is available to the user for clarity when appropriate.
}

\ourGloss{\glossaryTerm{local variable}}{%
(of a function) a variable \spadglossSee{bound}{binding} by that
function and such that its binding is invisible to any function
that function calls.
Also called a {\it lexical} variable.
By default in the interpreter:
\begin{enumerate}
\item
any variable \spad{x} that appears on the left-hand side of an
assignment
is normally regarded a local variable of that function.
%The right-hand side of an assignment is looked at before the
%left-hand side.
If the intention of an assignment is to change the value of a
\spadgloss{global variable} \spad{x}, the body of the function must then
contain the statement \spad{free x}.
\item
any other variable is regarded as a \spadgloss{free variable}.
\end{enumerate}
An optional declaration \spad{local x} is available to declare
explicitly a variable to be a local variable.
All \spadglossSee{formal parameters}{formal parameter}
are local variables to the function.
}

\ourGloss{\glossaryTerm{loop}}{%
1.
an expression containing a \spad{repeat}.
\spadkey{repeat}
2.
a collection expression having a
\spad{for} or a
\spadkey{for}
\spad{while},
\spadkey{while}
for example, \spad{[f(i) for i in S]}.
\spadkey{while}
}


\ourGloss{\glossaryTerm{loop body}}{%
the part of a loop following the \spad{repeat}
\spadkey{repeat}
that tells what to do each iteration.
For example, the body of the loop \spad{for x in S repeat B} is
\spad{B}. For a collection expression, the body of the loop precedes the
initial \spad{for}
\spadkey{for}
or \spad{while}.
\spadkey{while}
}


\ourGloss{\glossaryTerm{macro}}{%
1. {\it (interactive syntax)}
An expression of the form \spad{macro a == b} where \spad{a} is a
\spadgloss{symbol} causes \spad{a} to be textually replaced by the
expression \spad{b} at \spadgloss{parse} time.
2.
An expression of the form \spad{macro f(a) == b} defines a parameterized
macro expansion for a parameterized form \spad{f}. This macro causes a
form \spad{f}(\spad{x}) to be textually replaced by the expression
\spad{c} at parse time, where \spad{c} is the expression obtained by
replacing \spad{a} by \spad{x} everywhere in \spad{b}.
See also \spadgloss{definition} where a similar substitution is done
during \spadgloss{evaluation}.
3. {\it (programming language syntax)}
An expression of the form \spad{a ==> b} where \spad{a} is a symbol.
}


\ourGloss{\glossaryTerm{mode}}{%
a type expression containing a question-mark (\spadSyntax{?}).
For example, the mode {\sf POLY ?} designates {\it the class of all
polynomials over an arbitrary ring}.
}


\ourGloss{\glossaryTerm{mutable}}{%
objects that contain \spadglossSee{pointers}{pointer}
to other objects and that
\index{semantics!pointer}
have operations defined on them that alter these pointers.
Contrast \spadgloss{immutable}.
\Language{} uses \spadgloss{pointer semantics} as does \spadgloss{LISP}
\index{semantics!copying}
in contrast with many other languages such as PASCAL
\index{PASCAL}
that use
\spadgloss{copying semantics}.
See \spadgloss{pointer semantics} for details.
}


\ourGloss{\glossaryTerm{name}}{%
1.
a \spadgloss{symbol} denoting a \spadgloss{variable}, such as
the variable \spad{x}.
2.
a \spadgloss{symbol} denoting an \spadgloss{operation},
that is, the operation \spad{divide: (Integer, Integer) -> Integer}.
}


\ourGloss{\glossaryTerm{nullary}}{%
a function with no arguments, for example,
\spadfun{characteristic}; operation or function with \spadgloss{arity} zero.
}



\ourGloss{\glossaryTerm{object}}{%
a data entity created or manipulated by programs.
Elements of domains, functions, and domains themselves are objects.
The most basic objects are \spadglossSee{literals}{literal}; all other objects must
be created by \spadglossSee{functions}{function}.
Objects can refer to other objects using \spadglossSee{pointers}{pointer}
and can be \spadgloss{mutable}.
}


\ourGloss{\glossaryTerm{object code}}{%
code that can be directly executed by hardware; also known as {\it
machine language}.
}


\ourGloss{\glossaryTerm{operand}}{%
an argument of an \spadgloss{operator} (regarding an operator as a
\spadgloss{function}).
}


\ourGloss{\glossaryTerm{operation}}{%
an abstraction of a \spadgloss{function}, described by a
\spadgloss{signature}. For example, \spad{fact:
NonNegativeInteger -> NonNegativeInteger} describes an operation for
``the factorial of a (non-negative) integer.''
}


\ourGloss{\glossaryTerm{operator}}{%
special reserved words in the language such as \spadop{+} and
\spadop{*}; operators can be either \spadgloss{prefix} or
\spadgloss{infix} and have a relative \spadgloss{precedence}.
}


\ourGloss{\glossaryTerm{overloading}}{%
the use of the same name to denote distinct operations; an
operation is
identified by a \spadgloss{signature} identifying its name, the number
and types of its arguments, and its return types.
If two functions can have identical signatures, a \spadgloss{package
call} must be made to distinguish the two.
}


\ourGloss{\glossaryTerm{package}}{%
a special case of a domain, one for which the exported operations
depend solely on the parameters
and other explicit domains (contain no \$).
Intuitively, packages are collections of
(\spadgloss{polymorphic}) functions.
Facilities for integration, differential equations, solution of
linear or polynomial equations, and group theory are provided by
packages.
}


\ourGloss{\glossaryTerm{package call}}{%
{\it (syntax)} an expression of the form \spad{e \$ P} where \spad{e} is
an \spadgloss{application} and \spad{P} denotes some \spadgloss{package}
(or \spadgloss{domain}).
}


\ourGloss{\glossaryTerm{package constructor}}{%
same
\index{constructor!package}
as \spadgloss{domain constructor}.
}


\ourGloss{\glossaryTerm{parameter}}{%
see \spadgloss{argument}.
}


\ourGloss{\glossaryTerm{parameterized datatype}}{%
a domain that is built on another, for example, polynomials with integer
\index{datatype!parameterized}
coefficients.
}


\ourGloss{\glossaryTerm{parameterized form}}{%
a expression of the form \spad{f(x,y)}, an \spadgloss{application} of a
function.
}


\ourGloss{\glossaryTerm{parent}}{%
(of a domain or category) a category which is explicitly declared in the source code
definition for the domain either to the left of the {\tt with} or
as an \spadgloss{export} of the domain.
See \spadgloss{category extension}.
See also a {\bf Cross Reference} page of a constructor in \Browse{}.
}


\ourGloss{\glossaryTerm{parse}}{%
1.
(verb) to transform a user input string representing a valid
\Language{} expression into an internal representation as a
tree-structure; the
resulting internal representation is then ``interpreted'' by \Language{} to
perform some indicated action.
}


\ourGloss{\glossaryTerm{partially ordered set}}{%
a set with a reflexive, transitive and antisymetric \spadgloss{binary}
operation.
}


\ourGloss{\glossaryTerm{pattern matching}}{%
1.
(on expressions) Given an expression called the ``subject'' \spad{u}, the
attempt to rewrite \spad{u} using a set of ``rewrite rules.''
Each rule has the form \spad{A == B} where \spad{A} indicates an
expression called a ``pattern'' and \spad{B} denotes a ``replacement.''
The meaning of this rule is ``replace \spad{A} by \spad{B}.''
If a given pattern \spad{A} matches a subexpression of \spad{u}, that
subexpression is replaced by \spad{B}.
Once rewritten, pattern matching continues until no further changes
occur. 2.
(on strings) the attempt to match a string indicating a ``pattern'' to
another string called a ``subject'', for example, for the purpose of
identifying a list of names.
In \Browse{}, users may enter \spadglossSee{search strings}{search string}
for the purpose
of identifying constructors, operations, and attributes.
}


\ourGloss{\glossaryTerm{pile}}{%
alternate syntax for a block, using indentation and column alignment
(see also \spadgloss{block}).
}


\ourGloss{\glossaryTerm{pointer}}{%
a reference implemented by a link directed from one object to another in
the computer memory.
An object is said to {\it refer} to another if it has a pointer to that
other object.
Objects can also refer to themselves (cyclic references are legal).
\index{semantics!pointer}
Also more than one object can refer to the same object.
See also \spadgloss{pointer semantics}.
}


\ourGloss{\glossaryTerm{pointer semantics}}{%
the programming language semantics used in languages such as LISP that
\index{semantics!copying}
allow objects to be \spadgloss{mutable}.
\index{semantics!pointer}
Consider the following sequence of \Language{} statements:
\newline
\spad{x : Vector Integer := [1,4,7]} \newline
\spad{y := x} \newline
\spad{swap!(x,2,3)} \newline
The function \spadfunFromX{swap}{Vector}
is used to interchange the second and third value in the list
\spad{x}, producing the value \spad{[1,7,4]}.
What value does \spad{y} have after evaluation of the third statement?
The answer is different in \Language{} than it is in a language with
\spadgloss{copying semantics}.
In \Language{}, first the vector \spad{[1,2,3]} is created and the variable
\spad{x} set to \spadglossSee{point}{pointer} to this object.
Let's call this object \spad{V}.
Next, the variable \spad{y} is made to point to \spad{V} just as
\spad{x} does.
Now the third statement interchanges the last 2 elements of \spad{V}
(the \spadSyntax{!} at the end of the name \spadfunFromX{swap}{Vector} tells you
that this operation is destructive, that is, it changes the elements {\it
in place}).
\index{operation!destructive}
Both \spad{x} and \spad{y} perceive this change to \spad{V}.
\index{semantics!copying}
Thus both \spad{x} and \spad{y} then have the value \spad{[1,7,4]}.
In PASCAL, the second statement causes a copy of \spad{V} to be stored
\index{PASCAL}
under \spad{y}.
Thus the change to \spad{V} made by the third statement does not affect
\spad{y}.
}

\texht{\newpage}{}

\ourGloss{\glossaryTerm{polymorphic}}{%
a \spadgloss{function} (for example, one implementing an \spadgloss{algorithm})
defined with categorical types so as to be
applicable over a variety of domains
(the domains which are members of the categorical types).
Every \Language{} function defined in a domain or package constructor with a
domain-valued parameter is polymorphic.
For example, the same matrix \spadop{+} function is used to add
``matrices over integers'' as ``matrices over matrices over integers.''
}


\ourGloss{\glossaryTerm{postfix}}{%
an \spadgloss{operator} that follows its single \spadgloss{operand}.
Postfix operators are not available in \Language{}.
}


\ourGloss{\glossaryTerm{precedence}}{%
{\it (syntax)} refers to the so-called {\it binding power} of an
operator. For example, \spadop{*} has higher binding power than \spadop{+} so
that the expression \spad{a + b * c} is equivalent to \spad{a + (b * c)}.
}


\ourGloss{\glossaryTerm{precision}}{%
the number of digits in the specification of a number.
The operation \spadfunFrom{digits}{Float} sets this for objects
of \spadtype{Float}.
\exptypeindex{Float}
}


\ourGloss{\glossaryTerm{predicate}}{%
1.
a Boolean-valued function, for example, \spad{odd: Integer -> Boolean}.
2.
a Boolean-valued expression.
}


\ourGloss{\glossaryTerm{prefix}}{%
{\it (syntax)} an \spadgloss{operator} such as \spadop{-}
that is written {\it before} its single \spadgloss{operand}.
Every function of one argument can be used as a prefix operator.
For example, all of the following have equivalent meaning in
\Language{}: \spad{f(x)}, \spad{f x}, and \spad{f.x}.
See also \spadgloss{dot notation}.
}


\ourGloss{\glossaryTerm{quote}}{%
the prefix \spadgloss{operator} \spadSyntax{'} meaning {\it do not
evaluate}.
}


\ourGloss{\glossaryTermNoIndex{Record}}{%
(basic domain constructor) a domain constructor used to create an
\exptypeindex{Record}
inhomogeneous aggregate composed of pairs of
\spadglossSee{selectors}{selector} and
\spadglossSee{values}{value}.
A \pspadtype{Record} domain is written in the form
\spad{Record(a1: D1, \ldots, an: Dn)} (\spad{n > 0}) where
\spad{a1}, \ldots, \spad{an} are identifiers called the {\it selectors}
of the record, and \spad{D1}, \ldots, \spad{Dn} are domains indicating
the type of the component stored under selector \spad{an}.
}


\ourGloss{\glossaryTerm{recurrence relation}}{%
A relation that can be expressed as a function \spad{f} with some
argument \spad{n} which depends on the value of \spad{f} at \spad{k}
previous values.
In most cases, \Language{} will rewrite a recurrence relation on
compilation so as to \spadgloss{cache} its previous \spad{k} values and
therefore make the computation significantly more efficient.
}


\ourGloss{\glossaryTerm{recursion}}{%
use of a self-reference within the body of a function.
Indirect recursion is when a function uses a function below it in the
call chain.
}


\ourGloss{\glossaryTerm{recursive}}{%
1.
A function that calls itself, either directly or indirectly through
another function.
2.
self-referential.
See also \spadgloss{recursive}.
}


\ourGloss{\glossaryTerm{reference}}{%
see \spadgloss{pointer}
}

\ourGloss{\glossaryTerm{relative}}{%
(of a domain) A package that exports operations relating to the domain,
in addition to those exported by the domain.
See a {\bf Cross Reference} page of a constructor in \Browse{}.
}



%\ourGloss{\glossaryTermNoIndex{Rep}}{%
%a special identifier used as a \spadgloss{local variable} of a domain
%\spadkey{Rep}
%constructor body to denote the representation domain for objects of a
%domain. See \spadgloss{representation}.
%}

\ourGloss{\glossaryTerm{representation}}{%
a \spadgloss{domain} providing a data structure for elements of a
domain, generally denoted by the special identifier \spadgloss{Rep} in
the \Language{} programming language.
As domains are \spadglossSee{abstract datatypes}{abstract datatype},
this representation is
not available to users of the domain, only to functions defined in the
\spadgloss{function body} for a domain constructor.
Any domain can be used as a representation.
}


\ourGloss{\glossaryTerm{reserved word}}{%
a special sequence of non-blank characters with special meaning in the
\Language{} language.
Examples of reserved words are names such as \spad{for},
\spadkey{for}
\spad{if},
\spadkey{if}
and \spad{free},
\spadkey{free}
operator names such as
\spadop{+} and \spadfun{mod}, special character strings such as
\spadSyntax{==} and \spadSyntax{:=}.
}


\ourGloss{\glossaryTerm{retraction}}{%
to move an object in a parameterized domain back to the underlying
domain, for example to move the object \spad{7} from a ``fraction of
integers'' (domain \spadtype{Fraction Integer}) to ``the integers'' (domain
\spadtype{Integer}).
}


\ourGloss{\glossaryTerm{return}}{%
when leaving a function, the value of the expression following
\spad{return}
\spadkey{return}
becomes the value of the function.
}


\ourGloss{\glossaryTerm{ring}}{%
a set with a commutative addition, associative multiplication, a unit
element, where multiplication is distributive over addition and subtraction.
}


\ourGloss{\glossaryTerm{rule}}{%
{\it (syntax)} 1.
An expression of the form \spad{rule A == B} indicating a ``rewrite
rule.'' 2.
An expression of the form \spad{rule (R1;...;Rn)} indicating a set of
``rewrite rules'' \spad{R1},...,\spad{Rn}.
See \spadgloss{pattern matching} for details.
}


\ourGloss{\glossaryTerm{run-time}}{%
the time when computation is done.
Contrast with \spadgloss{compile-time}, and
\spadgloss{dynamic} as opposed to \spadgloss{static}.
For example, the decision of the intepreter to build
a structure such as ``matrices with power series entries'' in response to
user input is made at run-time.
}


\ourGloss{\glossaryTerm{run-time check}}{%
an error-checking that can be done only when the program receives user
input; for example, confirming that a value is in the proper range for a
computation.
}


\ourGloss{\glossaryTerm{search string}}{%
a string entered into an \spadgloss{input area} on a \HyperName{} screen.
}


\ourGloss{\glossaryTerm{selector}}{%
an identifier used to address a component value of a
\pspadtype{Record} datatype.
\exptypeindex{Record}
}


\ourGloss{\glossaryTerm{semantics}}{%
the relationships between symbols and their meanings.
The rules for obtaining the {\it meaning} of any syntactically valid
expression.
}


\ourGloss{\glossaryTerm{semigroup}}{%
{\it (algebra)} a \spadgloss{monoid} which need not have an identity; it
is closed and associative.
}


\ourGloss{\glossaryTerm{side effect}}{%
action that changes a component or structure of a value.
\index{operation!destructive}
See \spadgloss{destructive operation} for details.
}


\ourGloss{\glossaryTerm{signature}}{%
{\it (syntax)} an expression describing the type of an \spadgloss{operation}.
A signature has the form \spad{name : source -> target}, where
\spad{source} is the type of the arguments of the operation, and
\spad{target} is the type of the result.
}


\ourGloss{\glossaryTerm{small float}}{%
an object of
the domain \spadtype{DoubleFloat}
for floating-point arithmetic as provided by the
\exptypeindex{DoubleFloat}
computer hardware.
}


\ourGloss{\glossaryTerm{small integer}}{%
an object of
the domain \spadtype{SingleInteger}
for integer arithmetic
\exptypeindex{SingleInteger}
as provided by the computer hardware.
}


\ourGloss{\glossaryTerm{source}}{%
the \spadgloss{type} of the argument of a \spadgloss{function}; the type
expression before the \spad{->} in a \spadgloss{signature}.
For example, the source of \spad{f : (Integer, Integer) -> Integer} is
\spad{(Integer, Integer)}.
}


\ourGloss{\glossaryTerm{sparse}}{%
data structure whose elements are mostly identical (a sparse matrix is
one filled mostly with zeroes).
}


\ourGloss{\glossaryTerm{static}}{%
that computation done before run-time, such as compilation.
Contrast \spadgloss{dynamic}.
}


\ourGloss{\glossaryTerm{step number}}{%
the number that precedes user input lines in an interactive session;
the output of user results is also labeled by this number.
}


\ourGloss{\glossaryTerm{stream}}{%
an object of \spadtype{Stream(R)}, a generalization of a
\spadgloss{list} to allow an infinite number of elements.
Elements of a stream are computed ``on demand.''
Streams are used to implement various forms of power series.
}


\ourGloss{\glossaryTerm{string}}{%
an object of domain \spadtype{String}.
Strings are \spadglossSee{literals}{literal} consisting of an arbitrary sequence of
\spadglossSee{characters}{character} surrounded by double-quotes (\spadSyntax{"}),
for example, \spad{"Look here!"}.
}


\ourGloss{\glossaryTerm{subdomain}}{%
{\it (basic concept)} a \spadgloss{domain} together with a
\spadgloss{predicate} characterizing the members of the domain
that belong to the subdomain.
The exports of a subdomain are usually distinct from the domain
itself.
A fundamental assumption however is that values in the subdomain
are automatically \spadglossSee{coerceable}{coercion} to values in
the domain.
For example, if \spad{n} and \spad{m} are declared to be members
of a subdomain of the integers, then {\it any} \spadgloss{binary}
operation from \spadtype{Integer} is available on \spad{n} and
\spad{m}.
On the other hand, if the result of that operation is to be
assigned to, say, \spad{k}, also declared to be of that subdomain,
a \spadgloss{run-time} check is generally necessary to ensure that
the result belongs to the subdomain.
}


\ourGloss{\glossaryTerm{such that clause}}{%
{\it (syntax)}
the use of \spadSyntax{|} followed by an expression to filter an
iteration.
}


\ourGloss{\glossaryTerm{suffix}}{%
{\it (syntax)} an \spadgloss{operator} that is placed after its operand.
Suffix operators are not allowed in the \Language{} language.
}


\ourGloss{\glossaryTerm{symbol}}{%
objects denoted by \spadgloss{identifier} \spadglossSee{literals}{literal}; an
element of domain \spadtype{Symbol}.
The interpreter, by default, converts the symbol \spad{x} into
\spadtype{Variable(x)}.
}


\ourGloss{\glossaryTerm{syntax}}{%
rules of grammar and punctuation for forming correct expressions.
}


\ourGloss{\glossaryTerm{system commands}}{%
top-level \Language{} statements that begin with \spadSyntax{)}.
System commands allow users to query the database, read files, trace
functions, and so on.
}


\ourGloss{\glossaryTerm{tag}}{%
an identifier used to discriminate a branch of a \pspadtype{Union} type.
\exptypeindex{Union}
}


\ourGloss{\glossaryTerm{target}}{%
the \spadgloss{type} of the result of a \spadgloss{function}; the type
expression following the \spadSyntax{->} in a \spadgloss{signature}.
}

\ourGloss{\glossaryTerm{top-level}}{%
refers to direct user interactions with the \Language{} interpreter.
}


\ourGloss{\glossaryTerm{totally ordered set}}{%
{\it (algebra)} a partially ordered set where any two elements are
comparable.
}


\ourGloss{\glossaryTerm{trace}}{%
use of system function \spadsys{)trace} to track the arguments passed to
a function and the values returned.
}


\ourGloss{\glossaryTerm{tuple}}{%
an expression of two or more other expressions separated by commas,
for example, \spad{4,7,11}.
Tuples are also used for multiple arguments both for
\spadglossSee{applications}{application} (for example, \spad{f(x,y)}) and in
\spadglossSee{signatures}{signature}
(for example, \spad{(Integer, Integer) ->
Integer}). A tuple is not a data structure, rather a syntax mechanism for
grouping expressions.
}


\ourGloss{\glossaryTerm{type}}{%
The type of any \spadgloss{category} is the unique symbol {\it
Category}.
The type of a \spadgloss{domain} is any \spadgloss{category} to
which the domain belongs.
The type of any other object is either the (unique) domain to
which the object belongs or a \spadgloss{subdomain} of that domain.
The type of objects is in general not unique.
}

\ourGloss{\glossaryTermNoIndex{Type}}{%
a category with no operations or attributes, of which all other categories
\exptypeindex{Type}
in \Language{} are \spadglossSee{extensions}{category extension}.
}

\ourGloss{\glossaryTerm{type checking}}{%
a system function that determines whether the datatype of an object is
appropriate for a given operation.
}


\ourGloss{\glossaryTerm{type constructor}}{%
a \spadgloss{domain constructor} or \spadgloss{category constructor}.
}


\ourGloss{\glossaryTerm{type inference}}{%
when the interpreter chooses the type for an object based on context.
For example, if the user interactively issues the definition
\spad{f(x) == (x + \%i)^2} then issues \spad{f(2)}, the
interpreter will infer the type of \spad{f} to be \spad{Integer ->
Complex Integer}.
}


\ourGloss{\glossaryTerm{unary}}{%
operation or function with \spadgloss{arity} 1.
}


\ourGloss{\glossaryTerm{underlying domain}}{%
for a \spadgloss{domain} that has a single domain-valued parameter, the
{\it underlying domain} refers to that parameter.
For example, the domain ``matrices of integers'' (\spadtype{Matrix
Integer}) has underlying domain \spadtype{Integer}.
}


\ourGloss{\glossaryTermNoIndex{Union}}{%
(basic domain constructor) a domain constructor used to combine any set
\exptypeindex{Union}
of domains into a single domain.
A \pspadtype{Union}
domain is written in the form \spad{Union(a1: D1, ..., an: Dn)}
(\spad{n > 0}) where \spad{a1}, ..., \spad{an} are identifiers called the
{\it tags} of the union, and \spad{D1}, ..., \spad{Dn} are domains called
the {\it branches} of the union.
The tags \spad{\spad{ai}} are optional, but required when two of the
\spad{\spad{Di}} are equal, for example,
\spad{Union(inches: Integer, centimeters: Integer)}. In the interpreter,
values of union domains are automatically coerced to values in the
branches and vice-versa as appropriate.
See also \spadgloss{case}.
}


\ourGloss{\glossaryTerm{unit}}{%
{\it (algebra)} an invertible element.
}


\ourGloss{\glossaryTerm{user function}}{%
a function defined by a user during an interactive session.
Contrast \spadgloss{built-in function}.
}


\ourGloss{\glossaryTerm{user variable}}{%
a variable created by the user at top-level during an interactive
session.
}


\ourGloss{\glossaryTerm{value}}{%
1.
the result of \spadglossSee{evaluating}{evaluation} an expression.
2.
a property associated with a \spadgloss{variable} in a
\spadgloss{binding} in an \spadgloss{environment}.
}


\ourGloss{\glossaryTerm{variable}}{%
a means of referring to an object, but not an object itself.
A variable has a name and an associated \spadgloss{binding} created by
\spadgloss{evaluation} of \Language{} expressions such as
\spadglossSee{declarations}{declaration},
\spadglossSee{assignments}{assignment}, and
\spadglossSee{definitions}{definition}.
In the top-level \spadgloss{environment} of the
interpreter, variables are
\spadglossSee{global variables}{global variable}.
Such variables can be freely referenced in user-defined functions
although a \spad{free} declaration is needed to assign values to
\spadkey{free}
them. See \spadgloss{local variable} for details.
}


\ourGloss{\glossaryTermNoIndex{Void}}{%
the type given when the \spadgloss{value} and \spadgloss{type} of an
expression are not needed.
\exptypeindex{Void}
Also used when there is no guarantee at run-time that a value and
predictable mode will result.
}


\ourGloss{\glossaryTerm{wild card}}{%
a symbol that matches any substring including the empty string; for
example, the search string ``{\tt *an*}'' matches any word containing the
consecutive letters ``{\tt a}'' and ``{\tt n}''.
}


\ourGloss{\glossaryTerm{workspace}}{%
an interactive record of the user input and output held in an
interactive history file.
Each user input and corresponding output expression in the workspace has
a corresponding \spadgloss{step number}.
The current output expression in the workspace is referred to as
\spad{\%}. The output expression associated with step number \spad{n} is
referred to by \spad{\%\%(n)}.
The \eth{\spad{k}} previous output expression relative to the current step
number \spad{n} is referred to by \spad{\%\%(- k)}.
Each interactive \spadgloss{frame} has its own workspace.
}

}\onecolumn\fussy
